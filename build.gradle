buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
		camundaSpringBootStarterVersion = '3.2.1'
		camundaVersion = '7.10.0'
		camundaSpinVersion = '1.6.5'
		camelVersion = '2.23.1'
		groovyVersion = '2.5.5'
		spockVersion = '1.2-groovy-2.5'
	}
	repositories {
		mavenLocal()
		maven {
			// Pick up camunda bits from Camunda in preference to the versions on Maven central.
			url 'https://app.camunda.com/nexus/content/repositories/camunda-bpm/'
		}
		mavenCentral()
		maven {
			url 'https://ci1.carlsonwagonlit.com/nexus/repository/CBR_Releases/'
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
	}

}

plugins {
	id 'org.springframework.boot' version '2.1.2.RELEASE'
	id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'org.nickthearchitect.camunda'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		url 'https://ci1.carlsonwagonlit.com/nexus/repository/CBR_Releases/'
	}
}

ext {
	springCloudVersion = 'Greenwich.RELEASE'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation("org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:${camundaSpringBootStarterVersion}"){
		exclude group: 'org.camunda.bpm.springboot', module: 'camunda-bpm-spring-boot-starter-test'
	}
	implementation "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:${camundaSpringBootStarterVersion}"
	// Take Camunda SPIN for a spin
	implementation "org.camunda.spin:camunda-spin-core:${camundaSpinVersion}"
	implementation "org.camunda.spin:camunda-spin-dataformat-json-jackson:${camundaSpinVersion}"
	implementation "org.camunda.spin:camunda-spin-dataformat-xml-dom:${camundaSpinVersion}"
	implementation "org.camunda.bpm:camunda-engine-plugin-spin:${camundaVersion}"
	// Everyone needs a Camel
	implementation 'org.camunda.bpm.extension.camel:camunda-bpm-camel-spring:0.5'
	implementation "org.apache.camel:camel-spring-boot-starter:${camelVersion}"
	implementation "org.apache.camel:camel-http4:${camelVersion}"
	implementation "org.apache.camel:camel-jackson-starter:${camelVersion}"
	implementation "org.apache.camel:camel-jackson:${camelVersion}"

	// We need a database, for now just use H2
	runtime 'com.h2database:h2'
	// Also add support for mysql and choose at runtime
	// https://mvnrepository.com/artifact/mysql/mysql-connector-java
	runtime group: 'mysql', name: 'mysql-connector-java', version: '8.0.11'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}
